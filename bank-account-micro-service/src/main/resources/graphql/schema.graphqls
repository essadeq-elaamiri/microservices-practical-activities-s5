type Query {
    # that for requests (Consultation)
    # a request that returns a list of BankAccounts
    bankAccounts: [BankAccount],
    bankAccountsByType(accountType:String):[BankAccount],
    bankAccountById(id:String): BankAccount # return a BankAccount Obj
}

type Mutation {
    # ERROR: createBankAccount(bankAccount: BankAccount): BankAccount
    # We must create INPUT Object
    createBankAccount(bankAccount: BankAccountRequestDTO ): BankAccount, ##
    updateBankAccount(accountId: String, bankAccount: BankAccountRequestDTO): BankAccount,
    deleteBankAccount(accountId: String): String
}

type BankAccount {
    id: String,
    createdAt: String,
    balance: Float,
    currencyCode: String,
    accountType: String,
    customer: Customer
}

type Customer{
    id: ID,
    name: String
}

input BankAccountRequestDTO { ## We have to have a class with the same name
    balance: Float,
    currencyCode: String,
    accountType: String
}